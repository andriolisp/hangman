swagger: "2.0"
info:
  description: "This is a sample server API for a Hangman game"
  version: "1.0.0"
  title: "Hangman API"
  contact:
    email: "carlos.andrioli@gmail.com"
  license:
    name: "Apache 2.0"
    url: "http://www.apache.org/licenses/LICENSE-2.0.html"
host: "localhost:7100"
basePath: "/v1"
tags:
- name: "game"
  description: "API Game"
schemes:
- "http"
paths:
  /game:
    post:
      tags:
      - "game"
      summary: "Create a new Hangman game"
      description: "After providing a number of players the API will create a game with a random word"
      operationId: "postGame"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Game object with only the num_players property filled"
        required: true
        schema:
          $ref: "#/definitions/Game"
      responses:
        200: 
          description: "Game created"
          schema:
            $ref: "#/definitions/Game"
        405:
          description: "Invalid input"
        404:
          description: "Invalid input"
        403:
          description: "Invalid input"
  /game/{id}:
    get:
      tags:
      - "game"
      summary: "Find game by ID"
      description: "Returns a game"
      operationId: "getGame"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "ID of the game"
        required: true
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Game"
        405:
          description: "Invalid input"
        404:
          description: "Invalid input"
        403:
          description: "Invalid input"
    put:
      tags:
      - "game"
      summary: "Make a play for the game"
      description: ""
      operationId: "putGame"
      consumes:
      - "application/application/json"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "ID of the game"
        required: true
        type: "string"
      - in: "body"
        name: "body"
        description: "Details Object"
        required: true
        schema:
          $ref: "#/definitions/Details"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Game"
        405:
          description: "Invalid input"
        404:
          description: "Invalid input"
        403:
          description: "Invalid input"
definitions:
  Game:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
        description: "UUID for the game"
      size:
        type: "integer"
        format: "int64"
        description: "Word size"
      remaining:
        type: "integer"
        format: "int64"
        description: "How many letters are missing to finish the game"
      turn:
        type: "integer"
        format: "int32"
        description: "Player turn"
      num_players:
        type: "integer"
        format: "int32"
        description: "Total number of players on the game"
      winner:
        type: "integer"
        format: "int32"
        description: "Which player is the winner, 0 is for undecided games and -1 when all the players lost"
      message:
        type: "string"
        description: "Information message from the API"
      replacers:
        type: "array"
        description: "Replacers for the letters found"
        items:
          type: "string"
      details:
        type: "array"
        description: "List of plays made during the game"
        items:
          $ref: "#/definitions/Details"
      players:
        type: "array"
        description: "Dictionary of the players"
        items:
          $ref: "#/definitions/Player"
  Player:
    type: "object"
    properties:
      num:
        type: "integer"
        format: "int64"
        description: "Player Number"
      points:
        type: "integer"
        format: "int64"
        description: "Total points for the current player"
      dead:
        type: "boolean"
        description: "If the player is dead, on this case tried more them 5 unsucessful letters"
      turn:
        type: "boolean"
        description: "Check if it is the player's turn"
      tentatives:
        type: "integer"
        format: "int64"
        description: "How many unsucessful tentatives the users tried."
  Details:
    type: "object"
    properties:
      player:
        type: "integer"
        format: "int64"
        description: "Player # who made the play"
      points:
        type: "integer"
        format: "int64"
        description: "How many points was made on that play (10 points for each letter found)"
      letter:
        type: "string"
        description: "Letter played on the turn"
      found:
        type: "boolean"
        description: "If the word was found on the code"
      sequential:
        type: "integer"
        format: "int64"
        description: "Sequential play"
  